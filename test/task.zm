/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Implementation of task: Picture Naming
See readme.txt for more information.


Global structure of this experiment phase:

  - instructions

  - practice part
      trial

  - pause

  - test part
      trial


HISTORY:
2012-04-19 TV   Created.

\******************************************************************************/

//requires 1.12;

plugin zep_file;
import std_sound_input_device;
import std_sound_capture;

import defs;
import stimuli;
import shuffle;
import output;
import test_page;


Block task
{
    on_event:entry()
    {
    }


    Part instructions
    {
        on_event:entry()
        {
//            pause_page.set_text_size(1000, 600);
            pause_page.set_text(
                INTRODUCTION_TEXT, 
                true);

            pause_page.action(this);
        }
    }


    Block practice
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            num_cycles = prac_items.size;

            // Prepare test page: progress bar and prompt enabled.
            test_page.setup(num_cycles, true);

            // Create folder for audio recordings and start recording in 100ms.
//            string dir = data_dir() + script_name() + "/";
//            if (!file_exists(dir)) create_dir_tree(dir);
//            string fn = dir + "ses-" + 
//                format(expdb.experiment.session.id, 4) + "-prac.wav";
//            sound_capture.rec(fn, reference_time + 100ms, 0s);
        }


        on_event:exit()
        {
            // Stop audio recording.
//            sound_capture.abort();

            test_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = prac_items[practice.cycle];

                test_page.action(this, item, reference_time, practice.cycle);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause
    {
        on_event:entry()
        {
            pause_page.set_text(
                END_OF_PRACTICE_TEXT, 
                true);

            pause_page.action(this);
        }
    }


    Block test
    {
        TestItem        item;   // current item
        string dir;

        on_event:entry()
        {
            // Do not randomize test items table.
            if (shuffle_test_items() != OK) terminate;

            num_cycles = test_items.size;

            // Prepare test page: progress bar enabled, prompt disabled.
            test_page.setup(num_cycles, false);

            // Create folder for audio recordings and start recording in 100ms.
            dir = data_dir() + expdb.participant.id  + "/";
            if (!file_exists(dir)) create_dir_tree(dir);
            
        }


        on_event:exit()
        {
            test_page.cleanup();

            // Save test output table as CSV file.
            test_output_save();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items[test.cycle];
                    string fn = dir + "ses-" + 
                format(expdb.experiment.session.id, 1) + "-id-" + format(item.id,2) + "-trial-" + format(test.cycle+1,2) + "-pic-" + substring(item.imgfn, 0, length(item.imgfn) - 4) + ".wav";
                
                sound_capture.rec(fn, reference_time + 100ms, 0s);


                test_page.action(this, item, reference_time, test.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.trialnum = test.cycle + 1;
                output.id = item.id;
                output.type = item.type;
                output.imgfn = item.imgfn;
                test_output_append(output);

                 // Stop audio recording.
                sound_capture.abort();
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
